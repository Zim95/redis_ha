apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-cluster-config
  namespace: ${NAMESPACE}
data:
  redis.conf: |
    # Redis Cluster Configuration
    port 6379
    bind 0.0.0.0
    cluster-enabled yes
    cluster-config-file nodes.conf
    cluster-node-timeout 5000
    cluster-announce-ip $(POD_IP)
    cluster-announce-port 6379
    cluster-announce-bus-port 16379
    
    # Authentication
    requirepass ${REDIS_PASSWORD}
    masterauth ${REDIS_PASSWORD}
    
    # Persistence
    save 900 1
    save 300 10
    save 60 10000
    appendonly yes
    
    # Memory management
    maxmemory-policy allkeys-lru
    
    # Networking
    tcp-keepalive 300
    
    # Logging
    loglevel notice
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis-cluster
  namespace: ${NAMESPACE}
spec:
  serviceName: "redis-cluster-service"
  replicas: 6
  selector:
    matchLabels:
      app: redis-cluster
  template:
    metadata:
      labels:
        app: redis-cluster
    spec:
      containers:
        - name: redis
          image: redis:7-alpine
          ports:
            - containerPort: 6379
              name: client-port
            - containerPort: 16379
              name: cluster-port
          args:
            - redis-server
            - /config/redis.conf
          env:
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
          volumeMounts:
            - name: config
              mountPath: /config
            - name: data
              mountPath: /data
      volumes:
        - name: config
          configMap:
            name: redis-cluster-config
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 100Mi
---
apiVersion: v1
kind: Service
metadata:
  name: redis-cluster-service
  namespace: ${NAMESPACE}
spec:
  clusterIP: None
  selector:
    app: redis-cluster
  ports:
    - port: 6379
      targetPort: 6379
      name: client-port
    - port: 16379
      targetPort: 16379
      name: cluster-port
---
apiVersion: apps/v1
kind: Job
metadata:
  name: redis-cluster-init
  namespace: ${NAMESPACE}
spec:
  template:
    metadata:
      labels:
        app: redis-cluster-init
    spec:
      restartPolicy: OnFailure
      containers:
        - name: redis-cluster-init
          image: redis:7-alpine
          command:
            - /bin/sh
            - -c
            - |
              # Wait for Redis cluster pods to be ready
              until redis-cluster-5.redis-cluster-service.${NAMESPACE}.svc.cluster.local:6379 | head -1 | awk '{print $1}' | grep -q "PONG"; do
                echo "Waiting for Redis cluster pods to be ready..."
                sleep 5
              done
              
              # Create Redis cluster
              redis-cli -a ${REDIS_PASSWORD} --cluster create \
                redis-cluster-0.redis-cluster-service.${NAMESPACE}.svc.cluster.local:6379 \
                redis-cluster-1.redis-cluster-service.${NAMESPACE}.svc.cluster.local:6379 \
                redis-cluster-2.redis-cluster-service.${NAMESPACE}.svc.cluster.local:6379 \
                redis-cluster-3.redis-cluster-service.${NAMESPACE}.svc.cluster.local:6379 \
                redis-cluster-4.redis-cluster-service.${NAMESPACE}.svc.cluster.local:6379 \
                redis-cluster-5.redis-cluster-service.${NAMESPACE}.svc.cluster.local:6379 \
                --cluster-replicas 1 --cluster-yes
              
              echo "Redis cluster initialization complete!"
      backoffLimit: 3
